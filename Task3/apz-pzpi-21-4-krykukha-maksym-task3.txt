1 ОПИС АРХІТЕКТУРИ IOT ЧАСТИНИ
 
Вибір Python: Як зазначалося, Python був обраний за його простоту, зручність читання і великі бібліотеки, що робить його ідеальним для обробки даних і комунікаційних завдань, які мають вирішальне значення для системи IoT.
Розбивка на модулі (діаграма пакунків): Система організована в окремі модулі, кожен з яких виконує певну роль:
	CareDriveIot: Цей центральний модуль діє як ядро системи, організовуючи взаємодію між іншими модулями та керуючи загальною функціональністю.
	iot.py: Відповідає за створення та управління екземплярами пристроїв IoT в системі.
Heartbeat.py: Відстежує серцебиття водія за допомогою алгоритмів і передає ці дані на сервер для виявлення потенційних аномалій та сповіщень.
	Auth.py: Обробляє автентифікацію та авторизацію драйверів, забезпечуючи безпечний доступ та зв'язок пристроїв з окремими драйверами.
	configuration.py: Надає доступ до параметрів конфігурації системи та керує ними.
	Session.py: Керує даними сеансу драйвера, зокрема часом початку та завершення, показаннями датчиків та будь-якими виявленими подіями під час сеансу.
	Зовнішні залежності: Система використовує бібліотеку requests для HTTP-з'єднання з сервером та бібліотеку json для обробки даних у форматі JSON.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ
     
Адміністратор: Відіграє наглядову роль, налаштовує пристрої Інтернету речей та отримує доступ до даних серцебиття водія в режимі реального часу, щоб виявити потенційні ризики для здоров'я та забезпечити добробут водія.
Пристрій Інтернету речей: Виступає в ролі збирача даних і комунікатора, виконуючи такі дії, як:
	Управління сеансами: Пристрій надсилає на сервер оновлення статусу сеансу (початок, кінець) та детальні дані сеансу (наприклад, показання датчиків). Ця інформація має вирішальне значення для моніторингу активності водія та потенційних інцидентів.
	Керування пристроєм: Пристрій бере участь у власному створенні та реєстрації в системі, що забезпечує масштабованість та легке підключення нових пристроїв.
	Аутентифікація та асоціація: Пристрій полегшує автентифікацію водія, гарантуючи, що тільки авторизовані особи можуть користуватися системою. Потім він асоціюється з обліковим записом водія, що пройшов автентифікацію.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
       
	Для написання програмної реалізації Iot пристрою було обрано мову Python, його було обрано за простоту використання, великі бібліотеки та придатність для обробки та аналізу даних. 
	Для створення HTTPS запитів та комунікації з сервером було використано бібліотеку requests, також є SSLсертифікати за допомогою яких і підтримується надсилання запитів по цьому протоколу. 
	Для шифрування та розшифрування даних у форматі JSON було використано однойменну бібліотеку json.
	Сама програма складається з 6 класів. 
	Для більш детальної візуалізації архітектури та використаних технологій було розроблено діаграму пакетів (див. рис. 2).

4 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ
     
Наведена діаграма діяльності візуально представляє робочий процес розумного пристрою.
Початковий крок:
	створення нового пристрою IoT - процес починається зі створення та ініціалізації нового пристрою IoT. Цей крок включає присвоєння унікального ідентифікатора, налаштування параметрів і встановлення комунікаційних можливостей.
Основний потік:
	авторизація - водій проходить процес авторизації, який включає аутентифікацію на центральному сервері;
	приєднання IoT-пристрою до драйвера - після успішної авторизації водія, створений раніше пристрій приєднується в базі даних до цього водія, що дозволяє збирати та відстежувати персоналізовані дані;
	перевірити, чи розпочався сеанс водія - пристрій перевіряє, чи сеанс водія наразі активний. Це включає отримання сигналу від водія, виявлення руху транспортного засобу або інші тригери.
Точка прийняття рішення та розгалуження.
Чи сеанс розпочато? 
Точка прийняття рішення досягається на основі того, чи активний сеанс водія:
	так - якщо сеанс триває, пристрій переходить до наступного кроку;
	ні - якщо сеанс не активний, пристрій входить у цикл, повторюючи перевірку на початок сеансу.
Активний потік сеансу.
	перевірити, чи завершився сеанс драйвера - пристрій періодично перевіряє наявність ознак завершення сеансу драйвера. Це може бути введення даних водієм, виявлення бездіяльності або досягнення пункту призначення.
Точка прийняття рішення та розгалуження.
Сеанс завершено? 
Інша точка прийняття рішення оцінює, чи сеанс завершено.
	так - якщо сеанс завершено, пристрій виконує крок "Надіслати дані сеансу водія";
	ні - якщо сеанс все ще активний, пристрій повертається до попереднього кроку і продовжує моніторинг завершення сеансу.
Останній крок.
	надіслати дані сеансу водія - після завершення сеансу водія пристрій передає зібрані дані на центральний сервер. Ці дані включають тривалість сеансу, показання датчиків і будь-які виявлені події.

ВИСНОВКИ
 
У ході виконання лабораторної роботи були отримані навички проектування IoT частини програмної системи. Результатом роботи є розроблена програмна реалізація IoT частини програмної системи з використанням мови Python. При розробці продукту дотримувались вимоги до чистого коду мови програмування.