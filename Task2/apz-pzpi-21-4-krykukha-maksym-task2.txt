1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система "CareDrive" побудована за архітектурою клієнт-сервер і складається з п'яти основних компонентів:
Сервер: Ядро серверної частини, побудоване на NestJS, що відповідає за бізнес-логіку, обробку даних та доступ до API.
Веб-додаток: Додаток на ReactJS, що надає користувацький інтерфейс для взаємодії з системою, ймовірно, для адміністраторів та спостерігачів.
База даних: База даних PostgreSQL зберігає всі дані системи, включаючи інформацію про користувачів, дані про транспортні засоби, показники пульсу, сповіщення та нещасні випадки.
Мобільний додаток: Додаток на Kotlin дозволяє клієнтам (водіям) взаємодіяти з системою, переглядати інформацію та отримувати сповіщення.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання ілюструє фізичне розташування та шляхи зв'язку всередині системи:
*	Сервер бази даних: Містить базу даних PostgreSQL і взаємодіє з веб-сервером через TCP/IP;
*	Веб-сервер (NestJS): Містить основну логіку програми та надає API, доступний через HTTPS;
*	Веб-браузер (ReactJS): Взаємодіє з API веб-сервера за допомогою HTTPS;
*	Мобільний пристрій користувача (Kotlin): Взаємодіє з API веб-сервера за допомогою HTTPS;
*	Розумний пристрій (Raspberry Pi): Використовує HTTP-клієнт для взаємодії з API веб-сервера через HTTPS;

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Для розробки серверного застосунку було використано Clean Architecture, розподілом на моделі, сервіси та контролери;
TypeScript: Забезпечує безпеку типів і підвищує надійність коду.
Для демонстрації та тестування було обрано Postman, який дозволяє зручно тестувати API. Також для кращої конфіденційності було використано захищений протокол HTTPS, який захищає дані під час передачі.
Для автентифікації та авторизації було використано nestjs/jwt, бо це стандартизований спосіб безпечної передачі даних між двома сторонами, де міститься інформація закодована у JSON.
Для маршрутизації запитів було використано API контролери, яки допомогли розділити програму на логічні компоненти, кожен з яких був відповідальним за свою обробку певного запиту або дій користувача.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

В розробленій системі «CareDrive» існує 2 типи акторів: клієнт та спостерігач.
Основними можливостями клієнта є: можливість обирання вільного спостерігача при поїздці машиною, для того щоб при будь якому випадку спостерігач побачив змінення серцебиття клієнта та зміг швидко відреагувати на ситуацію; можливість перегляду інформації про власні машини; можливість перегляду клієнтом інформації стосовно його серцебиття; можливість перегляду інформації стосовно нещасних випадків, які сталися.
Основними можливостями спостерігача є: можливість увійти в систему як адміністратор; можливість створювати резервні копії даних системи та їх імпорт до системи; можливість переглядати та керувати користувачами системи.
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див додат. А.1). Таким чином за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

5 ПОБУДОВА ER-ДІАГРАМИ

Для проектування бази даних, попередньо була розроблена ER-модель діаграма (див. рис. 1). Вона складається з 6 таблиць: машина (Car), водій (Driver), спостерігач (Watcher), серцебиття (Heartbeat), тривога (Alert), нещасний випадок або скорочено випадок (Accident).
У базі даних наявні наступні зв’язки між сутностями:
*	водій і машина мають ролі один до багатьох, бо один водій може мати багато машин;
*	водій і серцебиття мають ролі один до багатьох, бо один водій може мати багато записів серцебиття;
*	водій і спостерігач мають ролі один до одного, бо лише один спостерігач слідкує за водієм для кращої безпеки;
*	водій і тривога мають ролі один до багатьох, адже багато тривог може статися у одного водія;
*	тривога та випадок мають ролі один до одного бо у одній тривозі може бути один випадок.

6 СПЕЦИФІКАЦІЯ REST
  
Кінцева точка			Ролі доступу				Метод HTTP		Призначення
/api/auth/driver_signup		Водій					POST			Створення нового акаунта клієнта
/api/auth/driver_login		Водій					POST			Вхід в обліковий запис клієнта
/api/auth/watcher_signup	Спостерігач, Адміністратор		POST			Створення нового акаунта спостерігача або адміністратора
/api/auth/watcher_login		Спостерігач, Адміністратор		POST			Вхід в акаунт спостерігача або адміністратора
/api/auth/logout		Всі користувачі				POST			Вихід з акаунту
/api/driver/add-watcher		Водій					POST			Додавання спостерігача за водієм
/api/driver/delete-watcher	Водій					POST			Видалення спостерігача за водієм
/api/driver/			Адміністратор				GET			Отримання інформації про водіїв
/api/driver/{ID}		Адміністратор				GET			Отримання інформації про водія
/api/driver/{ID}		Адміністратор 				PATCH			Оновлення акаунту користувача
/api/driver/{ID}		Адміністратор				DELETE			Видалення акаунту користувача
/api/watcher/			Адміністратор				GET			Отримання інформації про спостерігачів в системі
/api/watcher/{ID}		Адміністратор				GET			Отримання інформації про спостерігача
/api/watcher/{ID}		Адміністратор				PATCH			Оновлення акаунту спостерігача
/api/watcher/{ID}		Адміністратор				DELETE			Видалення акаунту спостерігача
/api/heartbeat/add		Спостерігач				POST			Додавання інформації про серцебиття водія
/api/heartbeat/{ID}		Водій, Спостерігач, Адміністратор 	PATCH			Оновлення інформації про серцебиття водія
/api/heartbeat/			Водій, Спостерігач, Адміністратор	GET			Отримання інформації про серцебиття водія
/api/heartbeat/{ID}		Водій, Спостерігач, Адміністратор	DELETE			Видалення запису серцебиття водія
/api/alert/add			Спостерігач				POST			Створення тривог
/api/alert/			Спостерігач				GET			Отримання всіх тривог водія
/api/alert/{ID}			Спостерігач				PATCH			Оновлення інформації про тривогу
/api/alert/{ID}			Спостерігач				DELETE			Видалення інформації про тривогу
/api/accident/add		Водій					POST			Створення випадку
/api/accident/{ID}		Водій					PATCH			Редагування випадку
/api/accident/			Спостерігач				GET			Отримання інформації про всі випадки водія
/api/accident/{ID}		Водій, Спостерігач			DELETE			Видалення інформації про випадок
/api/car/add			Водій					POST			Створення інформації про машину водія
/api/car/{ID}			Водій					PATCH			Оновлення інформації про машину водія
/api/car/			Водій					GET			Отримання інформації про всі машини водія
/api/car/{ID}			Водій					DELETE			Видалення інформації про машину водія
/api/database/export		Адміністраотр				GET			Створення резервної копії бази даних
/api/database/import		Адміністратор				POST			Внесення резервної копії бази даних

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

На діаграмі компонентів зображено багаторівневу архітектуру з чотирма різними рівнями:
Рівень представлення (контролери): Відповідає за взаємодію з користувацьким інтерфейсом.
Рівень додатків (сервіси): Реалізує бізнес-логіку та робочі процеси.
Доменний рівень (моделі): Представляє основні бізнес-концепції та структури даних.
Рівень даних (база даних): Відповідає за збереження та пошук даних.

ВИСНОВКИ

"CareDrive" демонструє добре спроектовану систему з акцентом на безпеку. Архітектура ефективно використовує різні технології та патерни для досягнення своїх функціональних можливостей. Також у ході виконання лабораторної роботи були отримані навички з проектування серверної частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проектуванні бази даних. Була розроблена програмна реалізація серверної частини програмної системи. При розробці продукту дотримувались вимоги до чистого коду мови програмування TypeScript.