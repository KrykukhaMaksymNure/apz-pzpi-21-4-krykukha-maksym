1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ

	Для створення клієнтської частини системи було обрано мову програмування TypeScript з використанням технології React, що забезпечує високу швидкість розробки та зручність у використанні завдяки статичній типізації та компонентному підходу.
	Для реалізації інтерфейсних елементів були використані бібліотеки Material UI, які пропонують готові та стилізовані компоненти для швидкої та зручної розробки візуально привабливого веб-додатку.
	Для впровадження локалізації інтерфейсу застосовано бібліотеку i18next, що дозволяє легко та ефективно створювати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків.
	Для реалізації навігації по сайту використовується бібліотека react-router-dom, яка надає зручні та потужні інструменти для створення динамічної навігації та управління маршрутами веб-додатку.
	Для виконання асинхронних запитів до сервера була використана бібліотека axios, яка забезпечує зручний та потужний інтерфейс для роботи з HTTP-запитами та дозволяє легко обробляти відповіді від сервера.
	Для розгортання сервера був використаний інструмент побудови Vite, який пропонує швидкий та ефективний спосіб розгортання веб-додатків, дозволяючи легко налаштовувати середовище розробки та підтримуючи автоматичне оновлення в реальному часі.
	Візуалізація усіх використаних пакетів розроблена на діаграмі пакетів (див. рис. 1).
	Клієнтську частину розроблено з використанням архітектури Feature-Sliced, яка передбачає структурування проєкту за допомогою шарів. Ці шари містять зрізи, а ті, в свою чергу, включають сегменти. Шари представлені як каталоги верхнього рівня додатку. У проєкті визначено сім шарів: app, pages, components, features, interfaces, context та hooks.
	Шар app містить основну конфігурацію додатку. Шар pages включає сторінки сайту. Шар components складається з різноманітних інтерфейсних компонентів, які можуть бути повторно використані. Шар features відповідає за функціональність додатку та визначає дії, доступні користувачу. Шар interfaces містить інтерфейси моделей, які використовуються для обміну даними з сервером та їхнього відображення на сторінках. Шар context визначає об’єкти контексту, що забезпечують передачу даних іншим компонентам, відповідним контексту. Шар hooks включає об’єкти хуків, які дозволяють компонентам отримувати доступ до станів системи.
	Більш детальна візуалізація архітектури розробленої програмної системи зображена на діаграмі компонентів (див. додат. Б.1).

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

     	Користувачами клієнтської системи для спостереження за станом водіїв є 2 типи акторів: адміністратор та клієнт.
Основними потребами адміністратора системи є: можливість керування системою, а саме експортувати базу даних та імпортувати базу даних в систему; можливість створювати нових водіїв та редагувати і видаляти  існуючих водіїв; можливість переглядати автомобілі водіїв, також редагувати або видаляти існуючі дані про авто; можливість створювати нових користувачів системи для того щоб слідкувати за водіями під час подорожі, редагувати та видаляти користувачів; можливість створювати, редагувати та видаляти нещасні випадки які трапляються.
Основними потребами клієнта системи а саме спостерігача є: переглядати статистку про серцебиття водія; переглядати статистику серцебиття усіх водіїв; переглядати вільних водіїв які не були обрани для спостерігання, щоб починати або закінчувати спостерігання за серцебиттям водія.
Взаємодія кожної ролі користувачів з клієнтської частини системи можна побачити на діаграмі прецедентів (див. додат. А.1).
Таким чином, на діаграмі прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

	Для створення клієнтської частини системи було обрано мову програмування TypeScript з використанням технології React, що забезпечує високу швидкість розробки та зручність у використанні завдяки статичній типізації та компонентному підходу.
	Для реалізації інтерфейсних елементів були використані бібліотеки Material UI, які пропонують готові та стилізовані компоненти для швидкої та зручної розробки візуально привабливого веб-додатку.
	Для впровадження локалізації інтерфейсу застосовано бібліотеку i18next, що дозволяє легко та ефективно створювати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків.
	Для реалізації навігації по сайту використовується бібліотека react-router-dom, яка надає зручні та потужні інструменти для створення динамічної навігації та управління маршрутами веб-додатку.
	Для виконання асинхронних запитів до сервера була використана бібліотека axios, яка забезпечує зручний та потужний інтерфейс для роботи з HTTP-запитами та дозволяє легко обробляти відповіді від сервера.
	Для розгортання сервера був використаний інструмент побудови Vite, який пропонує швидкий та ефективний спосіб розгортання веб-додатків, дозволяючи легко налаштовувати середовище розробки та підтримуючи автоматичне оновлення в реальному часі.
	Візуалізація усіх використаних пакетів розроблена на діаграмі пакетів (див. рис. 1).

4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

	Клієнтську частину розроблено з використанням архітектури Feature-Sliced, яка передбачає структурування проєкту за допомогою шарів. Ці шари містять зрізи, а ті, в свою чергу, включають сегменти. Шари представлені як каталоги верхнього рівня додатку. У проєкті визначено сім шарів: app, pages, components, features, interfaces, context та hooks.
	Шар app містить основну конфігурацію додатку. Шар pages включає сторінки сайту. Шар components складається з різноманітних інтерфейсних компонентів, які можуть бути повторно використані. Шар features відповідає за функціональність додатку та визначає дії, доступні користувачу. Шар interfaces містить інтерфейси моделей, які використовуються для обміну даними з сервером та їхнього відображення на сторінках. Шар context визначає об’єкти контексту, що забезпечують передачу даних іншим компонентам, відповідним контексту. Шар hooks включає об’єкти хуків, які дозволяють компонентам отримувати доступ до станів системи.
	Більш детальна візуалізація архітектури розробленої програмної системи зображена на діаграмі компонентів (див. додат. Б.1).

5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

	Початок використовування додатку це введення даних профілю, реєстрація або, якщо є існуючий профіль то авторизація. Після проходження першого етапу шлях користувача розподіляється на два путі, відповідно до ролі користувача.
	Якщо користувач – адміністратор, то він може використовувати панель адміністратора для управління всією системою. В нього є можливість імпортувати або експортувати базу даних системи; можливість переглядати користувачів системи а саме спостерігачів, та редагувати їх дані; можливість переглядати дані про водіїв, та редагувати їх дані; можливість переглядати машини водіїв, та редагувати ці дані; можливість переглядати усі нещасні випадки що скоїлись та редагувати ці дані.
	Та звичайний користувач системи – спостерігач. Він має можливість переглянути статистику серцебиття обраного водія; можливість переглядати статистику всіх водіїв; можливість закріпляти за собою водія для спостерігання за ним під час його поїздки.
	Детальна інформація щодо взаємодії з клієнтською частиною додатку зображено на діаграмі взаємодії (див. додат. В.1).
	Таким чином за допомогою діаграм пакетів, компонентів та взаємодії було визначено основні технології та архітектуру проекту.
	Приклади коду клієнтської частини представлено у додатку Г.

ВИСНОВКИ

     У ході виконання лабораторної роботи були отримані навички з проєктування клієнтської частини програмної системи. Результатом роботи є розроблена програмна реалізація клієнтської частини програмної системи з використанням React. При розробці продукту дотримувались вимоги до чистого коду мови програмування Typescript.